/*
 * Allegro REST API
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package observer.application.service.source.allegro.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.util.Objects;

/**
 * BaseOperation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-16T16:12:46.567+02:00[Europe/Belgrade]")

public class BaseOperation {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  /**
   * The group to which the given operation type belongs.
   */
  @JsonAdapter(GroupEnum.Adapter.class)
  public enum GroupEnum {
    INCOME("INCOME"),
    
    OUTCOME("OUTCOME"),
    
    REFUND("REFUND");

    private String value;

    GroupEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupEnum fromValue(String value) {
      for (GroupEnum b : GroupEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GroupEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private GroupEnum group;

  public static final String SERIALIZED_NAME_WALLET = "wallet";
  @SerializedName(SERIALIZED_NAME_WALLET)
  private Wallet wallet;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private OperationValue value = null;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurredAt";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private OffsetDateTime occurredAt;

  public BaseOperation() {
    this.type = this.getClass().getSimpleName();
  }

  public BaseOperation type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the operation.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Type of the operation.")

  public String getType() {
    return type;
  }



  public void setType(String type) {
    this.type = type;
  }


  public BaseOperation group(GroupEnum group) {
    
    this.group = group;
    return this;
  }

   /**
   * The group to which the given operation type belongs.
   * @return group
  **/
  @ApiModelProperty(required = true, value = "The group to which the given operation type belongs.")

  public GroupEnum getGroup() {
    return group;
  }



  public void setGroup(GroupEnum group) {
    this.group = group;
  }


  public BaseOperation wallet(Wallet wallet) {
    
    this.wallet = wallet;
    return this;
  }

   /**
   * Get wallet
   * @return wallet
  **/
  @ApiModelProperty(required = true, value = "")

  public Wallet getWallet() {
    return wallet;
  }



  public void setWallet(Wallet wallet) {
    this.wallet = wallet;
  }


  public BaseOperation value(OperationValue value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @ApiModelProperty(required = true, value = "")

  public OperationValue getValue() {
    return value;
  }



  public void setValue(OperationValue value) {
    this.value = value;
  }


  public BaseOperation occurredAt(OffsetDateTime occurredAt) {
    
    this.occurredAt = occurredAt;
    return this;
  }

   /**
   * Date and time of the operation in ISO 8601 format.
   * @return occurredAt
  **/
  @ApiModelProperty(required = true, value = "Date and time of the operation in ISO 8601 format.")

  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }



  public void setOccurredAt(OffsetDateTime occurredAt) {
    this.occurredAt = occurredAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseOperation baseOperation = (BaseOperation) o;
    return Objects.equals(this.type, baseOperation.type) &&
        Objects.equals(this.group, baseOperation.group) &&
        Objects.equals(this.wallet, baseOperation.wallet) &&
        Objects.equals(this.value, baseOperation.value) &&
        Objects.equals(this.occurredAt, baseOperation.occurredAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, group, wallet, value, occurredAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseOperation {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

