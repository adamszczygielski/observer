/*
 * Allegro REST API
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package observer.application.service.source.allegro.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * CheckoutFormDiscount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-16T16:12:46.567+02:00[Europe/Belgrade]")
public class CheckoutFormDiscount {
  /**
   * Describes type of discount used in checkout form. The types of discounts can be as follows: * &#x60;COUPON&#x60; - coupon was used during payment * &#x60;BUNDLE&#x60; - some of the line items were bought as a bundle * &#x60;MULTIPACK&#x60; - at least one line item was bought with multipack option * &#x60;CROSSMULTIPACK&#x60; - some of line items each from different offers were bought together as multipack 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    COUPON("COUPON"),
    
    BUNDLE("BUNDLE"),
    
    MULTIPACK("MULTIPACK"),
    
    CROSSMULTIPACK("CROSSMULTIPACK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;


  public CheckoutFormDiscount type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Describes type of discount used in checkout form. The types of discounts can be as follows: * &#x60;COUPON&#x60; - coupon was used during payment * &#x60;BUNDLE&#x60; - some of the line items were bought as a bundle * &#x60;MULTIPACK&#x60; - at least one line item was bought with multipack option * &#x60;CROSSMULTIPACK&#x60; - some of line items each from different offers were bought together as multipack 
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Describes type of discount used in checkout form. The types of discounts can be as follows: * `COUPON` - coupon was used during payment * `BUNDLE` - some of the line items were bought as a bundle * `MULTIPACK` - at least one line item was bought with multipack option * `CROSSMULTIPACK` - some of line items each from different offers were bought together as multipack ")

  public TypeEnum getType() {
    return type;
  }



  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutFormDiscount checkoutFormDiscount = (CheckoutFormDiscount) o;
    return Objects.equals(this.type, checkoutFormDiscount.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutFormDiscount {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

