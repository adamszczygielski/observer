/*
 * Allegro REST API
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package allegro.application.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * CategoryProductParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-16T16:12:46.567+02:00[Europe/Belgrade]")

public class CategoryProductParameter {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type of the product parameter. Other fields in this structure may appear based on the type of the parameter.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INTEGER("integer"),
    
    FLOAT("float"),
    
    STRING("string"),
    
    DICTIONARY("dictionary");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

//  public CategoryProductParameter() {
//    this.type = this.getClass().getSimpleName();
//  }

  public CategoryProductParameter id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The ID of the parameter.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11323", value = "The ID of the parameter.")

  public String getId() {
    return id;
  }



  public void setId(String id) {
    this.id = id;
  }


  public CategoryProductParameter name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the parameter in Polish.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Numer katalogowy", value = "The name of the parameter in Polish.")

  public String getName() {
    return name;
  }



  public void setName(String name) {
    this.name = name;
  }


  public CategoryProductParameter type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the product parameter. Other fields in this structure may appear based on the type of the parameter.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of the product parameter. Other fields in this structure may appear based on the type of the parameter.")

  public String getType() {
    return "";
  }



  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CategoryProductParameter required(Boolean required) {
    
    this.required = required;
    return this;
  }

   /**
   * Indicates whether the value of this parameter must be set in a product. Product without required parameters set cannot be created.
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the value of this parameter must be set in a product. Product without required parameters set cannot be created.")

  public Boolean getRequired() {
    return required;
  }



  public void setRequired(Boolean required) {
    this.required = required;
  }


  public CategoryProductParameter unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * The unit in which values of the parameter are used. May be &#x60;null&#x60;.
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "kg", value = "The unit in which values of the parameter are used. May be `null`.")

  public String getUnit() {
    return unit;
  }



  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryProductParameter categoryProductParameter = (CategoryProductParameter) o;
    return Objects.equals(this.id, categoryProductParameter.id) &&
        Objects.equals(this.name, categoryProductParameter.name) &&
        Objects.equals(this.type, categoryProductParameter.type) &&
        Objects.equals(this.required, categoryProductParameter.required) &&
        Objects.equals(this.unit, categoryProductParameter.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, required, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryProductParameter {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

