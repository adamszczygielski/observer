/*
 * Allegro REST API
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package allegro.application.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * Rates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-16T16:12:46.567+02:00[Europe/Belgrade]")
public class Rates {
  /**
   * Delivery rate value
   */
  @JsonAdapter(DeliveryEnum.Adapter.class)
  public enum DeliveryEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    DeliveryEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryEnum fromValue(Integer value) {
      for (DeliveryEnum b : DeliveryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return DeliveryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  private DeliveryEnum delivery;

  /**
   * Delivery cost rate value
   */
  @JsonAdapter(DeliveryCostEnum.Adapter.class)
  public enum DeliveryCostEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    DeliveryCostEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryCostEnum fromValue(Integer value) {
      for (DeliveryCostEnum b : DeliveryCostEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryCostEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryCostEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryCostEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return DeliveryCostEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_COST = "deliveryCost";
  @SerializedName(SERIALIZED_NAME_DELIVERY_COST)
  private DeliveryCostEnum deliveryCost;

  /**
   * Description rate value
   */
  @JsonAdapter(DescriptionEnum.Adapter.class)
  public enum DescriptionEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    DescriptionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DescriptionEnum fromValue(Integer value) {
      for (DescriptionEnum b : DescriptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DescriptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DescriptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DescriptionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return DescriptionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private DescriptionEnum description;

  /**
   * Service rate value
   */
  @JsonAdapter(ServiceEnum.Adapter.class)
  public enum ServiceEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    ServiceEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceEnum fromValue(Integer value) {
      for (ServiceEnum b : ServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceEnum read(final JsonReader jsonReader) throws IOException {
        Integer value = jsonReader.nextInt();
        return ServiceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private ServiceEnum service;


  public Rates delivery(DeliveryEnum delivery) {
    
    this.delivery = delivery;
    return this;
  }

   /**
   * Delivery rate value
   * @return delivery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Delivery rate value")

  public DeliveryEnum getDelivery() {
    return delivery;
  }



  public void setDelivery(DeliveryEnum delivery) {
    this.delivery = delivery;
  }


  public Rates deliveryCost(DeliveryCostEnum deliveryCost) {
    
    this.deliveryCost = deliveryCost;
    return this;
  }

   /**
   * Delivery cost rate value
   * @return deliveryCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Delivery cost rate value")

  public DeliveryCostEnum getDeliveryCost() {
    return deliveryCost;
  }



  public void setDeliveryCost(DeliveryCostEnum deliveryCost) {
    this.deliveryCost = deliveryCost;
  }


  public Rates description(DescriptionEnum description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description rate value
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Description rate value")

  public DescriptionEnum getDescription() {
    return description;
  }



  public void setDescription(DescriptionEnum description) {
    this.description = description;
  }


  public Rates service(ServiceEnum service) {
    
    this.service = service;
    return this;
  }

   /**
   * Service rate value
   * @return service
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "Service rate value")

  public ServiceEnum getService() {
    return service;
  }



  public void setService(ServiceEnum service) {
    this.service = service;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rates rates = (Rates) o;
    return Objects.equals(this.delivery, rates.delivery) &&
        Objects.equals(this.deliveryCost, rates.deliveryCost) &&
        Objects.equals(this.description, rates.description) &&
        Objects.equals(this.service, rates.service);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delivery, deliveryCost, description, service);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rates {\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    deliveryCost: ").append(toIndentedString(deliveryCost)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

