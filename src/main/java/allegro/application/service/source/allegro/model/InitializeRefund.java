/*
 * Allegro REST API
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package allegro.application.service.source.allegro.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * InitializeRefund
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-16T16:12:46.567+02:00[Europe/Belgrade]")
public class InitializeRefund {
  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private RefundPayment payment;

  /**
   * Reason for a payment refund.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    REFUND("REFUND"),
    
    COMPLAINT("COMPLAINT"),
    
    PRODUCT_NOT_AVAILABLE("PRODUCT_NOT_AVAILABLE"),
    
    PAID_VALUE_TOO_LOW("PAID_VALUE_TOO_LOW");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<RefundLineItem> lineItems = null;

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  private InitializeRefundDelivery delivery;

  public static final String SERIALIZED_NAME_OVERPAID = "overpaid";
  @SerializedName(SERIALIZED_NAME_OVERPAID)
  private InitializeRefundOverpaid overpaid;

  public static final String SERIALIZED_NAME_SURCHARGES = "surcharges";
  @SerializedName(SERIALIZED_NAME_SURCHARGES)
  private List<PaymentsSurcharge> surcharges = null;

  public static final String SERIALIZED_NAME_ADDITIONAL_SERVICES = "additionalServices";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SERVICES)
  private InitializeRefundAdditionalServices additionalServices;


  public InitializeRefund payment(RefundPayment payment) {
    
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @ApiModelProperty(required = true, value = "")

  public RefundPayment getPayment() {
    return payment;
  }



  public void setPayment(RefundPayment payment) {
    this.payment = payment;
  }


  public InitializeRefund reason(ReasonEnum reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * Reason for a payment refund.
   * @return reason
  **/
  @ApiModelProperty(required = true, value = "Reason for a payment refund.")

  public ReasonEnum getReason() {
    return reason;
  }



  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }


  public InitializeRefund lineItems(List<RefundLineItem> lineItems) {
    
    this.lineItems = lineItems;
    return this;
  }

  public InitializeRefund addLineItemsItem(RefundLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<RefundLineItem>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

   /**
   * List of order&#39;s line items which can be refunded.
   * @return lineItems
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of order's line items which can be refunded.")

  public List<RefundLineItem> getLineItems() {
    return lineItems;
  }



  public void setLineItems(List<RefundLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public InitializeRefund delivery(InitializeRefundDelivery delivery) {
    
    this.delivery = delivery;
    return this;
  }

   /**
   * Get delivery
   * @return delivery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InitializeRefundDelivery getDelivery() {
    return delivery;
  }



  public void setDelivery(InitializeRefundDelivery delivery) {
    this.delivery = delivery;
  }


  public InitializeRefund overpaid(InitializeRefundOverpaid overpaid) {
    
    this.overpaid = overpaid;
    return this;
  }

   /**
   * Get overpaid
   * @return overpaid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InitializeRefundOverpaid getOverpaid() {
    return overpaid;
  }



  public void setOverpaid(InitializeRefundOverpaid overpaid) {
    this.overpaid = overpaid;
  }


  public InitializeRefund surcharges(List<PaymentsSurcharge> surcharges) {
    
    this.surcharges = surcharges;
    return this;
  }

  public InitializeRefund addSurchargesItem(PaymentsSurcharge surchargesItem) {
    if (this.surcharges == null) {
      this.surcharges = new ArrayList<PaymentsSurcharge>();
    }
    this.surcharges.add(surchargesItem);
    return this;
  }

   /**
   * List of surcharges for payment which can be refunded.
   * @return surcharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of surcharges for payment which can be refunded.")

  public List<PaymentsSurcharge> getSurcharges() {
    return surcharges;
  }



  public void setSurcharges(List<PaymentsSurcharge> surcharges) {
    this.surcharges = surcharges;
  }


  public InitializeRefund additionalServices(InitializeRefundAdditionalServices additionalServices) {
    
    this.additionalServices = additionalServices;
    return this;
  }

   /**
   * Get additionalServices
   * @return additionalServices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InitializeRefundAdditionalServices getAdditionalServices() {
    return additionalServices;
  }



  public void setAdditionalServices(InitializeRefundAdditionalServices additionalServices) {
    this.additionalServices = additionalServices;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InitializeRefund initializeRefund = (InitializeRefund) o;
    return Objects.equals(this.payment, initializeRefund.payment) &&
        Objects.equals(this.reason, initializeRefund.reason) &&
        Objects.equals(this.lineItems, initializeRefund.lineItems) &&
        Objects.equals(this.delivery, initializeRefund.delivery) &&
        Objects.equals(this.overpaid, initializeRefund.overpaid) &&
        Objects.equals(this.surcharges, initializeRefund.surcharges) &&
        Objects.equals(this.additionalServices, initializeRefund.additionalServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payment, reason, lineItems, delivery, overpaid, surcharges, additionalServices);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InitializeRefund {\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    overpaid: ").append(toIndentedString(overpaid)).append("\n");
    sb.append("    surcharges: ").append(toIndentedString(surcharges)).append("\n");
    sb.append("    additionalServices: ").append(toIndentedString(additionalServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

