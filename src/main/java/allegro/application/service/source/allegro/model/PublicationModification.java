/*
 * Allegro REST API
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package allegro.application.service.source.allegro.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.util.Objects;

/**
 * Contains publication&#39;s fields to change
 */
@ApiModel(description = "Contains publication's fields to change")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-16T16:12:46.567+02:00[Europe/Belgrade]")
public class PublicationModification {
  /**
   * Action to perform
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ACTIVATE("ACTIVATE"),
    
    END("END");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_SCHEDULED_FOR = "scheduledFor";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_FOR)
  private OffsetDateTime scheduledFor;


  public PublicationModification action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action to perform
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Action to perform")

  public ActionEnum getAction() {
    return action;
  }



  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public PublicationModification scheduledFor(OffsetDateTime scheduledFor) {
    
    this.scheduledFor = scheduledFor;
    return this;
  }

   /**
   * Date and time for scheduling ACTIVATE action, will be ignored for another actions
   * @return scheduledFor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time for scheduling ACTIVATE action, will be ignored for another actions")

  public OffsetDateTime getScheduledFor() {
    return scheduledFor;
  }



  public void setScheduledFor(OffsetDateTime scheduledFor) {
    this.scheduledFor = scheduledFor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicationModification publicationModification = (PublicationModification) o;
    return Objects.equals(this.action, publicationModification.action) &&
        Objects.equals(this.scheduledFor, publicationModification.scheduledFor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, scheduledFor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicationModification {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    scheduledFor: ").append(toIndentedString(scheduledFor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

