/*
 * Allegro REST API
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package allegro.application.service.source.allegro.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ListingResponseFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-16T16:12:46.567+02:00[Europe/Belgrade]")
public class ListingResponseFilters {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The type of the filter:   - *MULTI* - multiple choice filter,  - *SINGLE* - single select (dropdown) filter,  - *NUMERIC* - range of numeric values (search offers with value matching this range),  - *NUMERIC_SINGLE* - single numeric value (search offers with given value matching the range defined in offer),  - *TEXT* - filter allowing user to input any text.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MULTI("MULTI"),
    
    SINGLE("SINGLE"),
    
    NUMERIC("NUMERIC"),
    
    NUMERIC_SINGLE("NUMERIC_SINGLE"),
    
    TEXT("TEXT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<ListingResponseFiltersValues> values = null;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private BigDecimal minValue;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private BigDecimal maxValue;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;


  public ListingResponseFilters id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Identifier of the filter. Should be used as query parameter key, optionally followed by idSuffix from parameter value (only for NUMERIC filters).
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "campaign", value = "Identifier of the filter. Should be used as query parameter key, optionally followed by idSuffix from parameter value (only for NUMERIC filters).")

  public String getId() {
    return id;
  }



  public void setId(String id) {
    this.id = id;
  }


  public ListingResponseFilters type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the filter:   - *MULTI* - multiple choice filter,  - *SINGLE* - single select (dropdown) filter,  - *NUMERIC* - range of numeric values (search offers with value matching this range),  - *NUMERIC_SINGLE* - single numeric value (search offers with given value matching the range defined in offer),  - *TEXT* - filter allowing user to input any text.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the filter:   - *MULTI* - multiple choice filter,  - *SINGLE* - single select (dropdown) filter,  - *NUMERIC* - range of numeric values (search offers with value matching this range),  - *NUMERIC_SINGLE* - single numeric value (search offers with given value matching the range defined in offer),  - *TEXT* - filter allowing user to input any text.")

  public TypeEnum getType() {
    return type;
  }



  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ListingResponseFilters name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the filter.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "kampania", value = "Name of the filter.")

  public String getName() {
    return name;
  }



  public void setName(String name) {
    this.name = name;
  }


  public ListingResponseFilters values(List<ListingResponseFiltersValues> values) {
    
    this.values = values;
    return this;
  }

  public ListingResponseFilters addValuesItem(ListingResponseFiltersValues valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<ListingResponseFiltersValues>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Available filter values.
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Available filter values.")

  public List<ListingResponseFiltersValues> getValues() {
    return values;
  }



  public void setValues(List<ListingResponseFiltersValues> values) {
    this.values = values;
  }


  public ListingResponseFilters minValue(BigDecimal minValue) {
    
    this.minValue = minValue;
    return this;
  }

   /**
   * Minimum valid value for filters of type NUMERIC.
   * @return minValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Minimum valid value for filters of type NUMERIC.")

  public BigDecimal getMinValue() {
    return minValue;
  }



  public void setMinValue(BigDecimal minValue) {
    this.minValue = minValue;
  }


  public ListingResponseFilters maxValue(BigDecimal maxValue) {
    
    this.maxValue = maxValue;
    return this;
  }

   /**
   * Maximum valid value for filters of type NUMERIC.
   * @return maxValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1000", value = "Maximum valid value for filters of type NUMERIC.")

  public BigDecimal getMaxValue() {
    return maxValue;
  }



  public void setMaxValue(BigDecimal maxValue) {
    this.maxValue = maxValue;
  }


  public ListingResponseFilters unit(String unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Unit of the NUMERIC/NUMERIC_SINGLE filter.
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "z≈Ç", value = "Unit of the NUMERIC/NUMERIC_SINGLE filter.")

  public String getUnit() {
    return unit;
  }



  public void setUnit(String unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListingResponseFilters listingResponseFilters = (ListingResponseFilters) o;
    return Objects.equals(this.id, listingResponseFilters.id) &&
        Objects.equals(this.type, listingResponseFilters.type) &&
        Objects.equals(this.name, listingResponseFilters.name) &&
        Objects.equals(this.values, listingResponseFilters.values) &&
        Objects.equals(this.minValue, listingResponseFilters.minValue) &&
        Objects.equals(this.maxValue, listingResponseFilters.maxValue) &&
        Objects.equals(this.unit, listingResponseFilters.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, name, values, minValue, maxValue, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListingResponseFilters {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

