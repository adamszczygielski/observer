/*
 * Allegro REST API
 * https://developer.allegro.pl/about
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package allegro.application.service.allegro.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * The state of the wallet after the operation.
 */
@ApiModel(description = "The state of the wallet after the operation.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-09-16T16:12:46.567+02:00[Europe/Belgrade]")
public class Wallet {
  /**
   * The payment operator.
   */
  @JsonAdapter(PaymentOperatorEnum.Adapter.class)
  public enum PaymentOperatorEnum {
    PAYU("PAYU"),
    
    P24("P24");

    private String value;

    PaymentOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentOperatorEnum fromValue(String value) {
      for (PaymentOperatorEnum b : PaymentOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentOperatorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_OPERATOR = "paymentOperator";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPERATOR)
  private PaymentOperatorEnum paymentOperator;

  /**
   * The type of the wallet.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AVAILABLE("AVAILABLE"),
    
    WAITING("WAITING");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private WalletBalance balance = null;


  public Wallet paymentOperator(PaymentOperatorEnum paymentOperator) {
    
    this.paymentOperator = paymentOperator;
    return this;
  }

   /**
   * The payment operator.
   * @return paymentOperator
  **/
  @ApiModelProperty(required = true, value = "The payment operator.")

  public PaymentOperatorEnum getPaymentOperator() {
    return paymentOperator;
  }



  public void setPaymentOperator(PaymentOperatorEnum paymentOperator) {
    this.paymentOperator = paymentOperator;
  }


  public Wallet type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the wallet.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The type of the wallet.")

  public TypeEnum getType() {
    return type;
  }



  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Wallet balance(WalletBalance balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * @return balance
  **/
  @ApiModelProperty(required = true, value = "")

  public WalletBalance getBalance() {
    return balance;
  }



  public void setBalance(WalletBalance balance) {
    this.balance = balance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Wallet wallet = (Wallet) o;
    return Objects.equals(this.paymentOperator, wallet.paymentOperator) &&
        Objects.equals(this.type, wallet.type) &&
        Objects.equals(this.balance, wallet.balance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentOperator, type, balance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Wallet {\n");
    sb.append("    paymentOperator: ").append(toIndentedString(paymentOperator)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

